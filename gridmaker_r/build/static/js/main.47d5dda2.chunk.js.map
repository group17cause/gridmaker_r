{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableCell","props","onClick","handleApplyColor","TableRow","cells","i","numCols","push","Table","addRow","setState","state","numRows","addColumn","handleColorChange","event","selectedColor","target","value","handColorApply","style","backgroundColor","rows","this","onChange","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAIeA,MAJf,SAAmBC,GACf,OAAO,oBAAIC,QAASD,EAAME,oBCWfC,MAVf,SAAkBH,GAGlB,IAFA,IAAII,EAAQ,GAEHC,EAAI,EAAGA,EAAIL,EAAMM,QAASD,IAC/BD,EAAMG,KAAK,cAAC,EAAD,CAAWL,iBAAkBF,EAAME,oBAG9C,OAAO,6BAAKE,KCgDDI,E,kDArDX,aAAe,IAAD,8BACV,gBAQJC,OAAS,WACL,EAAKC,UAAS,SAAAC,GACV,MAAO,CAACC,QAAQD,EAAMC,QAAU,OAX1B,EAedC,UAAY,WACR,EAAKH,UAAS,SAAAC,GACV,MAAO,CAACC,QAAQD,EAAML,QAAU,OAjB1B,EAqBdQ,kBAAoB,SAACC,GACjB,EAAKL,SAAS,CAACM,cAAeD,EAAME,OAAOC,SAtBjC,EAyBdC,eAAiB,SAACJ,GACdA,EAAME,OAAOG,MAAMC,gBAAkB,EAAKV,MAAMK,eAxBhD,EAAKL,MAAQ,CACTC,QAAS,EACTN,QAAS,EACTU,cAAe,OALT,E,0CA6Bd,WAGI,IAFA,IAAIM,EAAO,GAEFjB,EAAI,EAAGA,EAAIkB,KAAKZ,MAAMC,QAASP,IACpCiB,EAAKf,KAAK,cAAC,EAAD,CAAUD,QAAUiB,KAAKZ,MAAML,QAASJ,iBAAoBqB,KAAKrB,oBAGnF,OACI,gCACI,wBAAQD,QAASsB,KAAKd,OAAtB,qBACA,wBAAQR,QAASsB,KAAKV,UAAtB,wBACA,yBAAQW,SAAUD,KAAKT,kBAAvB,UACA,wBAAQI,MAAM,MAAd,iBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,uBAEA,gCACKI,W,GA/CGG,a,MCSLC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.47d5dda2.chunk.js","sourcesContent":["function TableCell(props) {\n    return <td onClick={props.handleApplyColor}></td>\n}\n\nexport default TableCell;","import TableCell from \"./TableCell\";\n\nfunction TableRow(props) {\nlet cells = [];\n\nfor (let i = 0; i < props.numCols; i++) {\n    cells.push(<TableCell handleApplyColor={props.handleApplyColor} />)\n    }\n\n    return <tr>{cells}</tr>\n}\n\nexport default TableRow;","import { Component } from \"react\";\nimport TableRow from \"./TableRow\"\n\nclass Table extends Component {\n    constructor() {\n        super();\n        this.state = {\n            numRows: 1,\n            numCols: 1,\n            selectedColor: \"red\"\n        }\n    }\n\n    addRow = () => {\n        this.setState(state => {\n            return {numRows:state.numRows + 1}\n        });\n    }\n\n    addColumn = () => {\n        this.setState(state => {\n            return {numRows:state.numCols + 1}\n        });\n    }\n\n    handleColorChange = (event) => {\n        this.setState({selectedColor: event.target.value});\n    }\n\n    handColorApply = (event) => {\n        event.target.style.backgroundColor = this.state.selectedColor;\n    }\n\n    render() {\n        let rows = [];\n\n        for (let i = 0; i < this.state.numRows; i++) {\n            rows.push(<TableRow numCols ={this.state.numCols} handleApplyColor = {this.handleApplyColor} />)\n        }\n    \n    return (\n        <div>\n            <button onClick={this.addRow}>Add Row</button>\n            <button onClick={this.addColumn}>Add Column</button>\n            <select onChange={this.handleColorChange}>\n            <option value=\"red\">Red</option>\n            <option value=\"blue\">Blue</option>\n            <option value=\"yellow\">Yellow</option>\n            </select>\n            <table>\n                {rows}\n            </table>\n        </div>\n    )\n    }\n}\n\nexport default Table;","import React from 'react';\nimport Table from './components/Table';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}